apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ${ metadata.namespace.asString }
  name: ${ metadata.name.asString }
  labels:
    app.kubernetes.io/name: ${ constants.APP_NAME }
    app.kubernetes.io/instance: ${ metadata.name.asString }
    app.kubernetes.io/managed-by: ${ constants.VM_OP_NAME }
  
data:
  config.yaml: |
    "/Runner":
      # The directory used to store data files. Defaults to (depending on 
      # values available):
      #  * $XDG_DATA_HOME/vmrunner/${ metadata.name.asString }
      #  * $HOME/.local/share/vmrunner/${ metadata.name.asString }
      #  * ./${ metadata.name.asString }
      dataDir: /var/local/vm-data
      
      # The directory used to store runtime files. Defaults to (depending on 
      # values available):
      #  * $XDG_RUNTIME_DIR/vmrunner/${ metadata.name.asString }
      #  * /tmp/$USER/vmrunner/${ metadata.name.asString }
      #  * /tmp/vmrunner/${ metadata.name.asString }
      # runtimeDir: "$XDG_RUNTIME_DIR/vmrunner/${ metadata.name.asString }"
      
      # The template to use. Resolved relative to /usr/share/vmrunner/templates.
      # template: "Standard-VM-latest.ftl.yaml"
    
      # The template is copied to the data diretory when the VM starts for
      # the first time. Subsequent starts use the copy unless this option is set.
      updateTemplate: true
    
      # Define the VM (required)
      vm:
        # The VM's name (required)
        name: ${ metadata.name.asString }
        
        # The machine's uuid. If none is specified, a uuid is generated
        # and stored in the data directory. If the uuid is important
        # (e.g. because licenses depend on it) it is recommaned to specify
        # it here explicitly or to carefully backup the data directory.
        # uuid: "generated uuid"
        <#if spec.vm.machineUuid??>
        uuid: "${ spec.vm.machineUuid.asString }"
        </#if>

        # Whether to provide a software TPM (defaults to false)
        # useTpm: false
        useTpm: ${ spec.vm.useTpm.asBoolean?c }
        
        # How to boot (see https://github.com/mnlipp/VM-Operator/blob/main/org.jdrupes.vmoperator.runner.qemu/resources/org/jdrupes/vmoperator/runner/qemu/defaults.yaml):
        #  * bios
        #  * uefi[-4m]
        #  * secure[-4m]
        firmware: ${ spec.vm.firmware.asString }
        
        # Whether to show a boot menu.
        # bootMenu: false
        bootMenu: ${ spec.vm.bootMenu.asBoolean?c }
    
        # When terminating, a graceful powerdown is attempted. If it
        # doesn't succeed within the given timeout (seconds) SIGTERM
        # is sent to Qemu.
        # powerdownTimeout: 900
        powerdownTimeout: ${ spec.vm.powerdownTimeout.asLong?c }
        
        # CPU settings
        cpuModel: ${ spec.vm.cpuModel.asString }
        # Setting maximumCpus to 1 omits the "-smp" options. The defaults (0)
        # cause the corresponding property to be omitted from the "-smp" option.
        # If currentCpus is greater than maximumCpus, the latter is adjusted.
        <#if spec.vm.maximumCpus?? >
        maximumCpus: ${ spec.vm.maximumCpus.asInt?c }
        </#if>
        <#if spec.vm.cpuTopology?? >
        cpuSockets: ${ spec.vm.cpuTopology.cpuSockets.asInt?c }
        diesPerSocket: ${ spec.vm.cpuTopology.diesPerSocket.asInt?c }
        coresPerSocket: ${ spec.vm.cpuTopology.coresPerSocket.asInt?c }
        threadsPerCore: ${ spec.vm.cpuTopology.threadsPerCore.asInt?c }
        </#if>
        <#if spec.vm.currentCpus?? >
        currentCpus: ${ spec.vm.currentCpus.asInt?c }
        </#if>
        
        # RAM settings
        # Maximum defaults to 1G
        maximumRam: "${ spec.vm.maximumRam.asString }"
        <#if spec.vm.currentRam?? >
        currentRam: "${ spec.vm.currentRam.asString }"
        </#if>
        
        # RTC settings.
        # rtcBase: utc
        # rtcClock: rt
        rtcBase: ${ spec.vm.rtcBase.asString }
        rtcClock: ${ spec.vm.rtcClock.asString }
        
        # Network settings
        # Supported types are "tap" and "user" (for debugging). Type "user"
        # supports only the property "net".
        # network:
        # - type: tap
        #   bridge: br0
        #   device: virtio-net
        #   mac: (undefined)
        network:
        <#assign nwCounter = 0/>
        <#list spec.vm.networks.asList() as itf>
        <#if itf.tap??>
        - type: tap
          device: ${ itf.tap.device.asString }
          bridge: ${ itf.tap.bridge.asString }
          <#if itf.tap.mac??>
          mac: "${ itf.tap.mac.asString }"
          </#if>
        <#elseif itf.user??>
        - type: user
          device: ${ itf.tap.device.asString }
          <#if itf.user.net??>
          net: "${ itf.user.net.asString }"
          </#if>
        </#if>
        <#assign nwCounter += 1/>
        </#list>

        # There are no default drives. The supported types are "ide-cd"
        # and "raw". All types support a "bootindex" property.
        # Type "raw" can have a property "file" (if backed by a file on
        # the host) or a property "device" (if backed by a device).    
        # drives:
        # - type: ide-cd
        #   bootindex: (undefined)
        #   file: (undefined)
        drives:
        <#assign drvCounter = 0/>
        <#list spec.vm.disks.asList() as disk>
        <#if disk.volumeClaimTemplate.metadata??
          && disk.volumeClaimTemplate.metadata.name??>
          <#assign name = disk.volumeClaimTemplate.metadata.name.asString>
        <#else>
          <#assign name = "" + drvCounter>
        </#if>
        - type: raw
          resource: /dev/disk-${ name }
        </#list>
        
        display:
          <#if spec.vm.display.spice??>
          spice:
            port: ${ spec.vm.display.spice.port.asInt?c }
            <#if spec.vm.display.spice.ticket??>
            ticket: "${ spec.vm.display.spice.ticket.asString }"
            </#if>
            <#if spec.vm.display.spice.streamingVideo??>
            ticket: "${ spec.vm.display.spice.streamingVideo.asString }"
            </#if>
            usbRedirects: ${ spec.vm.display.spice.usbRedirects.asInt?c }
          </#if>

  logging.properties: |
    handlers=java.util.logging.ConsoleHandler
    
    #org.jgrapes.level=FINE
    #org.jgrapes.core.handlerTracking.level=FINER
    
    org.jdrupes.vmoperator.runner.qemu.level=FINE
    
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.SimpleFormatter.format=%1$tb %1$td %1$tT %4$s %5$s%6$s%n
